// tslint:disable
/**
 * Authlete API
 * Authlete API Document. 
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    HskCreateRequest,
    HskCreateResponse,
    HskDeleteResponse,
    HskGetListResponse,
    HskGetResponse,
    Result,
} from '../models';

export interface HskCreateApiRequest {
    hskCreateRequest: HskCreateRequest;
}

export interface HskDeleteApiRequest {
    handle: string;
}

export interface HskGetApiRequest {
    handle: string;
}

/**
 * no description
 */
export class HskOperationsApi extends BaseAPI {

    /**
     * /api/hsk/create API
     */
    hskCreateApi({ hskCreateRequest }: HskCreateApiRequest): Observable<HskCreateResponse>
    hskCreateApi({ hskCreateRequest }: HskCreateApiRequest, opts?: OperationOpts): Observable<AjaxResponse<HskCreateResponse>>
    hskCreateApi({ hskCreateRequest }: HskCreateApiRequest, opts?: OperationOpts): Observable<HskCreateResponse | AjaxResponse<HskCreateResponse>> {
        throwIfNullOrUndefined(hskCreateRequest, 'hskCreateRequest', 'hskCreateApi');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<HskCreateResponse>({
            url: '/api/hsk/create',
            method: 'POST',
            headers,
            body: hskCreateRequest,
        }, opts?.responseOpts);
    };

    /**
     * /api/hsk/delete/{handle} API
     */
    hskDeleteApi({ handle }: HskDeleteApiRequest): Observable<HskDeleteResponse>
    hskDeleteApi({ handle }: HskDeleteApiRequest, opts?: OperationOpts): Observable<AjaxResponse<HskDeleteResponse>>
    hskDeleteApi({ handle }: HskDeleteApiRequest, opts?: OperationOpts): Observable<HskDeleteResponse | AjaxResponse<HskDeleteResponse>> {
        throwIfNullOrUndefined(handle, 'handle', 'hskDeleteApi');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<HskDeleteResponse>({
            url: '/api/hsk/delete/{handle}'.replace('{handle}', encodeURI(handle)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * /api/hsk/get/{handle} API
     */
    hskGetApi({ handle }: HskGetApiRequest): Observable<HskGetResponse>
    hskGetApi({ handle }: HskGetApiRequest, opts?: OperationOpts): Observable<AjaxResponse<HskGetResponse>>
    hskGetApi({ handle }: HskGetApiRequest, opts?: OperationOpts): Observable<HskGetResponse | AjaxResponse<HskGetResponse>> {
        throwIfNullOrUndefined(handle, 'handle', 'hskGetApi');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<HskGetResponse>({
            url: '/api/hsk/get/{handle}'.replace('{handle}', encodeURI(handle)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * /api/hsk/get/list API
     */
    hskGetListApi(): Observable<HskGetListResponse>
    hskGetListApi(opts?: OperationOpts): Observable<AjaxResponse<HskGetListResponse>>
    hskGetListApi(opts?: OperationOpts): Observable<HskGetListResponse | AjaxResponse<HskGetListResponse>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<HskGetListResponse>({
            url: '/api/hsk/get/list',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}
