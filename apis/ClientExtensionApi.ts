// tslint:disable
/**
 * Authlete API
 * Authlete API Document. 
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ClientExtensionRequestableScopesGetResponse,
    ClientExtensionRequestableScopesUpdateRequest,
    ClientExtensionRequestableScopesUpdateResponse,
    Result,
} from '../models';

export interface ClientExtensionRequestablesScopesDeleteApiRequest {
    clientId: string;
}

export interface ClientExtensionRequestablesScopesGetApiRequest {
    clientId: string;
}

export interface ClientExtensionRequestablesScopesUpdateApiRequest {
    clientId: string;
    clientExtensionRequestableScopesUpdateRequest: ClientExtensionRequestableScopesUpdateRequest;
}

/**
 * no description
 */
export class ClientExtensionApi extends BaseAPI {

    /**
     * Delete a requestable scopes of a client 
     * /api/client/extension/requestable_scopes/delete/{clientId} API
     */
    clientExtensionRequestablesScopesDeleteApi({ clientId }: ClientExtensionRequestablesScopesDeleteApiRequest): Observable<void>
    clientExtensionRequestablesScopesDeleteApi({ clientId }: ClientExtensionRequestablesScopesDeleteApiRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    clientExtensionRequestablesScopesDeleteApi({ clientId }: ClientExtensionRequestablesScopesDeleteApiRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(clientId, 'clientId', 'clientExtensionRequestablesScopesDeleteApi');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/api/client/extension/requestable_scopes/delete/{clientId}'.replace('{clientId}', encodeURI(clientId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get the requestable scopes per client 
     * /api/client/extension/requestable_scopes/get/{clientId} API
     */
    clientExtensionRequestablesScopesGetApi({ clientId }: ClientExtensionRequestablesScopesGetApiRequest): Observable<ClientExtensionRequestableScopesGetResponse>
    clientExtensionRequestablesScopesGetApi({ clientId }: ClientExtensionRequestablesScopesGetApiRequest, opts?: OperationOpts): Observable<AjaxResponse<ClientExtensionRequestableScopesGetResponse>>
    clientExtensionRequestablesScopesGetApi({ clientId }: ClientExtensionRequestablesScopesGetApiRequest, opts?: OperationOpts): Observable<ClientExtensionRequestableScopesGetResponse | AjaxResponse<ClientExtensionRequestableScopesGetResponse>> {
        throwIfNullOrUndefined(clientId, 'clientId', 'clientExtensionRequestablesScopesGetApi');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ClientExtensionRequestableScopesGetResponse>({
            url: '/api/client/extension/requestable_scopes/get/{clientId}'.replace('{clientId}', encodeURI(clientId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update requestable scopes of a client 
     * /api/client/extension/requestable_scopes/update/{clientId} API
     */
    clientExtensionRequestablesScopesUpdateApi({ clientId, clientExtensionRequestableScopesUpdateRequest }: ClientExtensionRequestablesScopesUpdateApiRequest): Observable<ClientExtensionRequestableScopesUpdateResponse>
    clientExtensionRequestablesScopesUpdateApi({ clientId, clientExtensionRequestableScopesUpdateRequest }: ClientExtensionRequestablesScopesUpdateApiRequest, opts?: OperationOpts): Observable<AjaxResponse<ClientExtensionRequestableScopesUpdateResponse>>
    clientExtensionRequestablesScopesUpdateApi({ clientId, clientExtensionRequestableScopesUpdateRequest }: ClientExtensionRequestablesScopesUpdateApiRequest, opts?: OperationOpts): Observable<ClientExtensionRequestableScopesUpdateResponse | AjaxResponse<ClientExtensionRequestableScopesUpdateResponse>> {
        throwIfNullOrUndefined(clientId, 'clientId', 'clientExtensionRequestablesScopesUpdateApi');
        throwIfNullOrUndefined(clientExtensionRequestableScopesUpdateRequest, 'clientExtensionRequestableScopesUpdateRequest', 'clientExtensionRequestablesScopesUpdateApi');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ClientExtensionRequestableScopesUpdateResponse>({
            url: '/api/client/extension/requestable_scopes/update/{clientId}'.replace('{clientId}', encodeURI(clientId)),
            method: 'PUT',
            headers,
            body: clientExtensionRequestableScopesUpdateRequest,
        }, opts?.responseOpts);
    };

}
