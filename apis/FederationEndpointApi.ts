// tslint:disable
/**
 * Authlete API
 * Authlete API Document. 
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    FederationConfigurationResponse,
    FederationRegistrationRequest,
    FederationRegistrationResponse,
    Result,
} from '../models';

export interface FederationConfigurationApiRequest {
    body?: object;
}

export interface FederationRegistrationApiRequest {
    federationRegistrationRequest: FederationRegistrationRequest;
}

/**
 * no description
 */
export class FederationEndpointApi extends BaseAPI {

    /**
     * This API gathers the federation configuration about a service.  The authorization server implementation should retrieve the value of the <code>action</code> response parameter from the API response and take the following steps according to the value.  <h3><code>OK</code></h3>  When the value of the <code> action</code> response parameter is <code>OK</code>, it means that Authlete could prepare an entity configuration successfully.  In this case, the implementation of the entity configuration endpoint of the authorization server should return an HTTP response to the client application with the HTTP status code \"`200 OK`\" and the content type \"`application/entity-statement+jwt`\". The message body (= an entity configuration in the JWT format) of the response has been prepared by Authlete\'s `/federation/configuration` API and it is available as the <code>responseContent</code> response parameter.  The implementation of the entity configuration endpoint can construct an HTTP response by doing like below.  <pre style=\"border: solid 1px black; padding: 0.5em;\"> 200 OK Content-Type: application/entity-statement+jwt (Other HTTP headers)  <i>(the value of the responseContent response parameter)</i></pre>  <h3><code>NOT_FOUND</code></h3>  When the value of the <code> action</code> response parameter is <code>NOT_FOUND</code>, it means that the service configuration has not enabled the feature of <a href= \"https://openid.net/specs/openid-connect-federation-1_0.html\">OpenID Connect Federation 1.0</a> and so the client application should have not access the entity configuration endpoint.  In this case, the implementation of the entity configuration endpoint of the authorization server should return an HTTP response to the client application with the HTTP status code \"`404 Not Found`\" and the content type \"`application/json`\". The message body (= error information in the JSON format) of the response has been prepared by Authlete\'s `/federation/configuration` API and it is available as the <code>responseContent</code> response parameter.  The implementation of the entity configuration endpoint can construct an HTTP response by doing like below.  <pre style=\"border: solid 1px black; padding: 0.5em;\"> 404 Not Found Content-Type: application/json (Other HTTP headers)  <i>(the value of the responseContent response parameter)</i></pre>  <h3><code>INTERNAL_SERVER_ERROR</code></h3>  could prepare an entity configuration successfully.  In this case, the implementation of the entity configuration endpoint of the authorization server should return an HTTP response to the client application with the HTTP status code \"`200 OK`\" and the content type \"`application/entity-statement+jwt`\". The message body (= an entity configuration in the JWT format) of the response has been prepared by Authlete\'s `/federation/configuration` API and it is available as the <code>responseContent</code> response parameter.  The implementation of the entity configuration endpoint can construct an HTTP response by doing like below.  <pre style=\"border: solid 1px black; padding: 0.5em;\"> 200 OK Content-Type: application/entity-statement+jwt (Other HTTP headers)  <i>(the value of the responseContent response parameter)</i></pre>   </details> 
     * /api/federation/configuration API
     */
    federationConfigurationApi({ body }: FederationConfigurationApiRequest): Observable<FederationConfigurationResponse>
    federationConfigurationApi({ body }: FederationConfigurationApiRequest, opts?: OperationOpts): Observable<AjaxResponse<FederationConfigurationResponse>>
    federationConfigurationApi({ body }: FederationConfigurationApiRequest, opts?: OperationOpts): Observable<FederationConfigurationResponse | AjaxResponse<FederationConfigurationResponse>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<FederationConfigurationResponse>({
            url: '/api/federation/configuration',
            method: 'POST',
            headers,
            body: body as any,
        }, opts?.responseOpts);
    };

    /**
     * The Authlete API is for implementations of the <b>federation registration endpoint</b> that accepts \"explicit client registration\". Its details are defined in <a href=\"https://openid.net/specs/openid-connect-federation-1_0.html\" >OpenID Connect Federation 1.0</a>. </p>  <p> The endpoint accepts `POST` requests whose `Content-Type` is either of the following. </p>  <ol>   <li>`application/entity-statement+jwt`   <li>`application/trust-chain+json` </ol>  <p> When the `Content-Type` of a request is `application/entity-statement+jwt`, the content of the request is the entity configuration of a relying party that is to be registered. In this case, the implementation of the federation registration endpoint should call Authlete\'s `/federation/registration` API with the entity configuration set to the `entityConfiguration` request parameter. </p>  <p> On the other hand, when the `Content-Type` of a request is `application/trust-chain+json`, the content of the request is a JSON array that contains entity statements in JWT format. The sequence of the entity statements composes the trust chain of a relying party that is to be registered. In this case, the implementation of the federation registration endpoint should call Authlete\'s `/federation/registration` API with the trust chain set to the `trustChain` request parameter. </p> 
     * /api/federation/registration API
     */
    federationRegistrationApi({ federationRegistrationRequest }: FederationRegistrationApiRequest): Observable<FederationRegistrationResponse>
    federationRegistrationApi({ federationRegistrationRequest }: FederationRegistrationApiRequest, opts?: OperationOpts): Observable<AjaxResponse<FederationRegistrationResponse>>
    federationRegistrationApi({ federationRegistrationRequest }: FederationRegistrationApiRequest, opts?: OperationOpts): Observable<FederationRegistrationResponse | AjaxResponse<FederationRegistrationResponse>> {
        throwIfNullOrUndefined(federationRegistrationRequest, 'federationRegistrationRequest', 'federationRegistrationApi');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<FederationRegistrationResponse>({
            url: '/api/federation/registration',
            method: 'POST',
            headers,
            body: federationRegistrationRequest,
        }, opts?.responseOpts);
    };

}
