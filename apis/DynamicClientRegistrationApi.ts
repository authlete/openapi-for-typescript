// tslint:disable
/**
 * Authlete API
 * Authlete API Document. 
 *
 * The version of the OpenAPI document: 2.2.25
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ClientRegistrationDeleteRequest,
    ClientRegistrationDeleteResponse,
    ClientRegistrationGetRequest,
    ClientRegistrationGetResponse,
    ClientRegistrationRequest,
    ClientRegistrationResponse,
    ClientRegistrationUpdateRequest,
    ClientRegistrationUpdateResponse,
    Result,
} from '../models';

export interface ClientRegistrationApiRequest {
    clientRegistrationRequest: ClientRegistrationRequest;
}

export interface ClientRegistrationDeleteApiRequest {
    clientRegistrationDeleteRequest: ClientRegistrationDeleteRequest;
}

export interface ClientRegistrationGetApiRequest {
    clientRegistrationGetRequest: ClientRegistrationGetRequest;
}

export interface ClientRegistrationUpdateApiRequest {
    clientRegistrationUpdateRequest: ClientRegistrationUpdateRequest;
}

/**
 * no description
 */
export class DynamicClientRegistrationApi extends BaseAPI {

    /**
     * Register a client. This API is supposed to be used to implement a client registration endpoint that complies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591) (OAuth 2.0 Dynamic Client Registration Protocol).  <br> <details> <summary>Description</summary>  This API is supposed to be called from the within the implementation of the client registration endpoint of the authorization server. The authorization server implementation should retrieve the value of `action` from the response and take the following steps according to the value.  **INTERNAL_SERVER_ERROR**  When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the API call from the authorization server implementation was wrong or that an error occurred in Authlete.  In either case, from a viewpoint of the client or developer, it is an error on the server side. Therefore, the authorization server implementation should generate a response with \"500 Internal Server Error\"s and `application/json`.  The value of `responseContent` is a JSON string which describes the error, so it can be used as the entity body of the response.  The following illustrates the response which the authorization server implementation should generate and return to the client or developer.  ``` HTTP/1.1 500 Internal Server Error Content-Type: application/json Cache-Control: no-store Pragma: no-cache  {responseContent} ```  The endpoint implementation may return another different response to the client or developer since \"500 Internal Server Error\" is not required by the specification.  **BAD_REQUEST**  When the value of `action` is `BAD_REQUEST`, it means that the request from the client or developer was wrong.  The authorization server implementation should generate a response with \"400 Bad Request\" and `application/json`.  The value of `responseContent` is a JSON string which describes the error, so it can be used as the entity body of the response.  The following illustrates the response which the authorization server implementation should generate and return to the client or developer.  ``` HTTP/1.1 400 Bad Request Content-Type: application/json Cache-Control: no-store Pragma: no-cache  {responseContent} ```  **CREATED**  When the value of `action` is `CREATED`, it means that the request from the client or developer is valid.  The authorization server implementation should generate a response to the client or developer with \"201 CREATED\" and `application/json`.  The `responseContent` a JSON string which can be used as the entity body of the response.  The following illustrates the response which the authorization server implementation should generate and return to the client or developer.  ``` HTTP/1.1 201 CREATED Content-Type: application/json Cache-Control: no-store Pragma: no-cache  {responseContent} ``` </details> 
     * /api/client/registration API
     */
    clientRegistrationApi({ clientRegistrationRequest }: ClientRegistrationApiRequest): Observable<ClientRegistrationResponse>
    clientRegistrationApi({ clientRegistrationRequest }: ClientRegistrationApiRequest, opts?: OperationOpts): Observable<AjaxResponse<ClientRegistrationResponse>>
    clientRegistrationApi({ clientRegistrationRequest }: ClientRegistrationApiRequest, opts?: OperationOpts): Observable<ClientRegistrationResponse | AjaxResponse<ClientRegistrationResponse>> {
        throwIfNullOrUndefined(clientRegistrationRequest, 'clientRegistrationRequest', 'clientRegistrationApi');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ClientRegistrationResponse>({
            url: '/api/client/registration',
            method: 'POST',
            headers,
            body: clientRegistrationRequest,
        }, opts?.responseOpts);
    };

    /**
     * Delete a dynamically registered client. This API is supposed to be used to implement a client registration management endpoint that complies with [RFC 7592](https://datatracker.ietf.org/doc/html/rfc7592) (OAuth 2.0 Dynamic Registration Management).  <br> <details> <summary>Description</summary>  This API is supposed to be called from the within the implementation of the client registration management endpoint of the authorization server. The authorization server implementation should retrieve the value of `action` from the response and take the following steps according to the value.  **INTERNAL_SERVER_ERROR**  When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the API call from the authorization server implementation was wrong or that an error occurred in Authlete.  In either case, from a viewpoint of the client or developer, it is an error on the server side. Therefore, the authorization server implementation should generate a response with \"500 Internal Server Error\"s and `application/json`.  The value of `responseContent` is a JSON string which describes the error, so it can be used as the entity body of the response.  The following illustrates the response which the authorization server implementation should generate and return to the client or developer.  ``` HTTP/1.1 500 Internal Server Error Content-Type: application/json Cache-Control: no-store Pragma: no-cache  {responseContent} ```  The endpoint implementation may return another different response to the client or developer since \"500 Internal Server Error\" is not required by the specification.  **BAD_REQUEST**  When the value of `action` is `BAD_REQUEST`, it means that the request from the client or developer was wrong.  The authorization server implementation should generate a response with \"400 Bad Request\" and `application/json`.  The value of `responseContent` is a JSON string which describes the error, so it can be used as the entity body of the response.  The following illustrates the response which the authorization server implementation should generate and return to the client or developer.  ``` HTTP/1.1 400 Bad Request Content-Type: application/json Cache-Control: no-store Pragma: no-cache  {responseContent} ```  **UNAUTHORIZED**  When the value of `action` is `UNAUTHORIZED`, it means that the registration access token used by the client configuration request (RFC 7592) is invalid, or the client application which the token is tied to does not exist any longer or is invalid.  The HTTP status of the response returned to the client application must be \"401 Unauthorized\" and the content type must be `application/json`.  The value of `responseContent` is a JSON string which describes the error, so it can be used as the entity body of the response.  The following illustrates the response which the endpoint implementation should generate and return to the client application.  ``` HTTP/1.1 401 Unauthorized Content-Type: application/json Cache-Control: no-store Pragma: no-cache  {responseContent} ```  NOTE: The `UNAUTHORIZED` value was added in October, 2021. See the description of `Service.unauthorizedOnClientConfigSupported` for details.  **DELETED**  When the value of `action` is `DELETED`, it means that the request from the client or developer is valid.  The authorization server implementation should generate a response to the client or developer with \"204 No Content\".  The following illustrates the response which the authorization server implementation should generate and return to the client or developer.  ``` HTTP/1.1 204 No Content Cache-Control: no-store Pragma: no-cache ``` </details> 
     * /api/client/registration/delete API
     */
    clientRegistrationDeleteApi({ clientRegistrationDeleteRequest }: ClientRegistrationDeleteApiRequest): Observable<ClientRegistrationDeleteResponse>
    clientRegistrationDeleteApi({ clientRegistrationDeleteRequest }: ClientRegistrationDeleteApiRequest, opts?: OperationOpts): Observable<AjaxResponse<ClientRegistrationDeleteResponse>>
    clientRegistrationDeleteApi({ clientRegistrationDeleteRequest }: ClientRegistrationDeleteApiRequest, opts?: OperationOpts): Observable<ClientRegistrationDeleteResponse | AjaxResponse<ClientRegistrationDeleteResponse>> {
        throwIfNullOrUndefined(clientRegistrationDeleteRequest, 'clientRegistrationDeleteRequest', 'clientRegistrationDeleteApi');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ClientRegistrationDeleteResponse>({
            url: '/api/client/registration/delete',
            method: 'POST',
            headers,
            body: clientRegistrationDeleteRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a dynamically registered client. This API is supposed to be used to implement a client registration management endpoint that complies with [RFC 7592](https://datatracker.ietf.org/doc/html/rfc7592) (OAuth 2.0 Dynamic Registration Management).  <br> <details> <summary>Description</summary>  This API is supposed to be called from the within the implementation of the client registration management endpoint of the authorization server. The authorization server implementation should retrieve the value of `action` from the response and take the following steps according to the value.  **INTERNAL_SERVER_ERROR**  When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the API call from the authorization server implementation was wrong or that an error occurred in Authlete.  In either case, from a viewpoint of the client or developer, it is an error on the server side. Therefore, the authorization server implementation should generate a response to the client or developer with \"500 Internal Server Error\"s and `application/json`.  The value of `responseContent` is a JSON string which describes the error, so it can be used as the entity body of the response.  The following illustrates the response which the authorization server implementation should generate and return to the client or developer.  ``` HTTP/1.1 500 Internal Server Error Content-Type: application/json Cache-Control: no-store Pragma: no-cache  {responseContent} ```  The endpoint implementation may return another different response to the client or developer since \"500 Internal Server Error\" is not required by the specification.  **BAD_REQUEST**  When the value of `action` is `BAD_REQUEST`, it means that the request from the client or developer was wrong.  The authorization server implementation should generate a response to the client or developer with \"400 Bad Request\" and `application/json`.  The value of `responseContent` is a JSON string which describes the error, so it can be used as the entity body of the response.  The following illustrates the response which the authorization server implementation should generate and return to the client or developer.  ``` HTTP/1.1 400 Bad Request Content-Type: application/json Cache-Control: no-store Pragma: no-cache  {responseContent} ```  **UNAUTHORIZED**  When the value of `action` is `UNAUTHORIZED`, it means that the registration access token used by the client configuration request (RFC 7592) is invalid, or the client application which the token is tied to does not exist any longer or is invalid.  The HTTP status of the response returned to the client application must be \"401 Unauthorized\" and the content type must be `application/json`.  The value of `responseContent` is a JSON string which describes the error, so it can be used as the entity body of the response.  The following illustrates the response which the endpoint implementation should generate and return to the client application.  ``` HTTP/1.1 401 Unauthorized Content-Type: application/json Cache-Control: no-store Pragma: no-cache  {responseContent} ```  NOTE: The `UNAUTHORIZED` value was added in October, 2021. See the description of `Service.unauthorizedOnClientConfigSupported` for details.  **OK**  When the value of `action` is `OK`, it means that the request from the client or developer is valid.  The authorization server implementation should generate a response to the client or developer with \"200 OK\" and `application/json`.  The `responseContent` a JSON string which can be used as the entity body of the response.  The following illustrates the response which the authorization server implementation should generate and return to the client or developer.  ``` HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache  {responseContent} ``` </details> 
     * /api/client/registration/get API
     */
    clientRegistrationGetApi({ clientRegistrationGetRequest }: ClientRegistrationGetApiRequest): Observable<ClientRegistrationGetResponse>
    clientRegistrationGetApi({ clientRegistrationGetRequest }: ClientRegistrationGetApiRequest, opts?: OperationOpts): Observable<AjaxResponse<ClientRegistrationGetResponse>>
    clientRegistrationGetApi({ clientRegistrationGetRequest }: ClientRegistrationGetApiRequest, opts?: OperationOpts): Observable<ClientRegistrationGetResponse | AjaxResponse<ClientRegistrationGetResponse>> {
        throwIfNullOrUndefined(clientRegistrationGetRequest, 'clientRegistrationGetRequest', 'clientRegistrationGetApi');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ClientRegistrationGetResponse>({
            url: '/api/client/registration/get',
            method: 'POST',
            headers,
            body: clientRegistrationGetRequest,
        }, opts?.responseOpts);
    };

    /**
     * Update a dynamically registered client. This API is supposed to be used to implement a client registration management endpoint that complies with [RFC 7592](https://datatracker.ietf.org/doc/html/rfc7592) (OAuth 2.0 Dynamic Registration Management).  <br> <details> <summary>Description</summary>  This API is supposed to be called from the within the implementation of the client registration management endpoint of the authorization server. The authorization server implementation should retrieve the value of `action` from the response and take the following steps according to the value.  **INTERNAL_SERVER_ERROR**  When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the API call from the authorization server implementation was wrong or that an error occurred in Authlete.  In either case, from a viewpoint of the client or developer, it is an error on the server side. Therefore, the authorization server implementation should generate a response with \"500 Internal Server Error\"s and `application/json`.  The value of `responseContent` is a JSON string which describes the error, so it can be used as the entity body of the response.  The following illustrates the response which the authorization server implementation should generate and return to the client or developer.  ``` HTTP/1.1 500 Internal Server Error Content-Type: application/json Cache-Control: no-store Pragma: no-cache  {responseContent} ```  The endpoint implementation may return another different response to the client or developer since \"500 Internal Server Error\" is not required by the specification.  **BAD_REQUEST**  When the value of `action` is `BAD_REQUEST`, it means that the request from the client or developer was wrong.  The authorization server implementation should generate a response with \"400 Bad Request\" and `application/json`.  The value of `responseContent` is a JSON string which describes the error, so it can be used as the entity body of the response.  The following illustrates the response which the authorization server implementation should generate and return to the client or developer.  ``` HTTP/1.1 400 Bad Request Content-Type: application/json Cache-Control: no-store Pragma: no-cache  {responseContent} ```  **UNAUTHORIZED**  When the value of `action` is `UNAUTHORIZED`, it means that the registration access token used by the client configuration request (RFC 7592) is invalid, or the client application which the token is tied to does not exist any longer or is invalid.  The HTTP status of the response returned to the client application must be \"401 Unauthorized\" and the content type must be `application/json`.  The value of `responseContent` is a JSON string which describes the error, so it can be used as the entity body of the response.  The following illustrates the response which the endpoint implementation should generate and return to the client application.  ``` HTTP/1.1 401 Unauthorized Content-Type: application/json Cache-Control: no-store Pragma: no-cache  {responseContent} ```  NOTE: The `UNAUTHORIZED` value was added in October, 2021. See the description of `Service.unauthorizedOnClientConfigSupported` for details.  **UPDATED**  When the value of `action` is `UPDATED`, it means that the request from the client or developer is valid.  The authorization server implementation should generate a response to the client or developer with \"200 OK\" and `application/json`.  The `responseContent` a JSON string which can be used as the entity body of the response.  The following illustrates the response which the authorization server implementation should generate and return to the client or developer.  ``` HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache  {responseContent} ``` </details> 
     * /api/client/registration/update API
     */
    clientRegistrationUpdateApi({ clientRegistrationUpdateRequest }: ClientRegistrationUpdateApiRequest): Observable<ClientRegistrationUpdateResponse>
    clientRegistrationUpdateApi({ clientRegistrationUpdateRequest }: ClientRegistrationUpdateApiRequest, opts?: OperationOpts): Observable<AjaxResponse<ClientRegistrationUpdateResponse>>
    clientRegistrationUpdateApi({ clientRegistrationUpdateRequest }: ClientRegistrationUpdateApiRequest, opts?: OperationOpts): Observable<ClientRegistrationUpdateResponse | AjaxResponse<ClientRegistrationUpdateResponse>> {
        throwIfNullOrUndefined(clientRegistrationUpdateRequest, 'clientRegistrationUpdateRequest', 'clientRegistrationUpdateApi');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ClientRegistrationUpdateResponse>({
            url: '/api/client/registration/update',
            method: 'POST',
            headers,
            body: clientRegistrationUpdateRequest,
        }, opts?.responseOpts);
    };

}
