// tslint:disable
/**
 * Authlete API
 * Authlete API Document. 
 *
 * The version of the OpenAPI document: 2.2.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
    AuthorizationDetails,
    DeliveryMode,
    DynamicScope,
    Pair,
    Scope,
} from './';

/**
 * @export
 * @interface BackchannelAuthenticationResponse
 */
export interface BackchannelAuthenticationResponse {
    /**
     * The code which represents the result of the API call.
     * @type {string}
     * @memberof BackchannelAuthenticationResponse
     */
    resultCode?: string;
    /**
     * A short message which explains the result of the API call.
     * @type {string}
     * @memberof BackchannelAuthenticationResponse
     */
    resultMessage?: string;
    /**
     * The next action that the authorization server implementation should take.
     * @type {string}
     * @memberof BackchannelAuthenticationResponse
     */
    action?: BackchannelAuthenticationResponseActionEnum;
    /**
     * The content that the authorization server implementation is to return to the client application. Its format varies depending on the value of `action` parameter. 
     * @type {string}
     * @memberof BackchannelAuthenticationResponse
     */
    responseContent?: string;
    /**
     * The client ID of the client application that has made the backchannel authentication request. 
     * @type {number}
     * @memberof BackchannelAuthenticationResponse
     */
    clientId?: number;
    /**
     * The client ID alias of the client application that has made the backchannel authentication request. 
     * @type {string}
     * @memberof BackchannelAuthenticationResponse
     */
    clientIdAlias?: string;
    /**
     * `true` if the value of the client_id request parameter included in the backchannel authentication request is the client ID alias. `false` if the value is the original numeric client ID. 
     * @type {boolean}
     * @memberof BackchannelAuthenticationResponse
     */
    clientIdAliasUsed?: boolean;
    /**
     * The name of the client application which has made the backchannel authentication request. 
     * @type {string}
     * @memberof BackchannelAuthenticationResponse
     */
    clientName?: string;
    /**
     * The scopes requested by the backchannel authentication request.  Basically, this property holds the value of the `scope` request parameter in the backchannel authentication request. However, because unregistered scopes are dropped on Authlete side, if the `scope` request parameter contains unknown scopes, the list returned by this property becomes different from the value of the `scope` request parameter.  Note that `description` property and `descriptions` property of each `scope` object in the array contained in this property is always null even if descriptions of the scopes are registered. 
     * @type {Array<Scope>}
     * @memberof BackchannelAuthenticationResponse
     */
    scopes?: Array<Scope>;
    /**
     * The names of the claims which were requested indirectly via some special scopes. See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) in OpenID Connect Core 1.0 for details. 
     * @type {Array<string>}
     * @memberof BackchannelAuthenticationResponse
     */
    claimNames?: Array<string>;
    /**
     * The client notification token included in the backchannel authentication request. 
     * @type {string}
     * @memberof BackchannelAuthenticationResponse
     */
    clientNotificationToken?: string;
    /**
     * The list of ACR values requested by the backchannel authentication request.  Basically, this property holds the value of the `acr_values` request parameter in the backchannel authentication request. However, because unsupported ACR values are dropped on Authlete side, if the `acr_values` request parameter contains unrecognized ACR values, the list returned by this property becomes different from the value of the `acr_values` request parameter. 
     * @type {Array<string>}
     * @memberof BackchannelAuthenticationResponse
     */
    acrs?: Array<string>;
    /**
     * The type of the hint for end-user identification which was included in the backchannel authentication request. 
     * @type {string}
     * @memberof BackchannelAuthenticationResponse
     */
    hintType?: string;
    /**
     * The value of the hint for end-user identification. 
     * @type {string}
     * @memberof BackchannelAuthenticationResponse
     */
    hint?: string;
    /**
     * The value of the `sub` claim contained in the ID token hint included in the backchannel authentication request. 
     * @type {string}
     * @memberof BackchannelAuthenticationResponse
     */
    sub?: string;
    /**
     * The binding message included in the backchannel authentication request. 
     * @type {string}
     * @memberof BackchannelAuthenticationResponse
     */
    bindingMessage?: string;
    /**
     * The binding message included in the backchannel authentication request. 
     * @type {string}
     * @memberof BackchannelAuthenticationResponse
     */
    userCode?: string;
    /**
     * The flag which indicates whether a user code is required.  `true` when both the `backchannel_user_code_parameter` metadata of the client (= Client\'s `bcUserCodeRequired` property) and the `backchannel_user_code_parameter_supported` metadata of the service (= Service\'s `backchannelUserCodeParameterSupported` property) are `true`. 
     * @type {boolean}
     * @memberof BackchannelAuthenticationResponse
     */
    userCodeRequired?: boolean;
    /**
     * The requested expiry for the authentication request ID (`auth_req_id`). 
     * @type {number}
     * @memberof BackchannelAuthenticationResponse
     */
    requestedExpiry?: number;
    /**
     * The request context of the backchannel authentication request.  It is the value of the request_context claim in the signed authentication request and its format is JSON. request_context is a new claim added by the FAPI-CIBA profile. 
     * @type {string}
     * @memberof BackchannelAuthenticationResponse
     */
    requestContext?: string;
    /**
     * The warnings raised during processing the backchannel authentication request. 
     * @type {Array<string>}
     * @memberof BackchannelAuthenticationResponse
     */
    warnings?: Array<string>;
    /**
     * The ticket which is necessary to call Authlete\'s `/auth/token/fail` API or `/auth/token/issue` API.  This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid. 
     * @type {string}
     * @memberof BackchannelAuthenticationResponse
     */
    ticket?: string;
    /**
     * The resources specified by the `resource` request parameters or by the `resource` property in the request object. If both are given, the values in the request object should be set. See \"Resource Indicators for OAuth 2.0\" for details. 
     * @type {Array<string>}
     * @memberof BackchannelAuthenticationResponse
     */
    resources?: Array<string>;
    /**
     * @type {AuthorizationDetails}
     * @memberof BackchannelAuthenticationResponse
     */
    authorizationDetails?: AuthorizationDetails;
    /**
     * The attributes of this service that the client application belongs to. 
     * @type {Array<Pair>}
     * @memberof BackchannelAuthenticationResponse
     */
    serviceAttributes?: Array<Pair>;
    /**
     * The attributes of the client. 
     * @type {Array<Pair>}
     * @memberof BackchannelAuthenticationResponse
     */
    clientAttributes?: Array<Pair>;
    /**
     * The dynamic scopes which the client application requested by the scope request parameter. 
     * @type {Array<DynamicScope>}
     * @memberof BackchannelAuthenticationResponse
     */
    dynamicScopes?: Array<DynamicScope>;
    /**
     * @type {DeliveryMode}
     * @memberof BackchannelAuthenticationResponse
     */
    deliveryMode?: DeliveryMode;
}

/**
 * @export
 * @enum {string}
 */
export enum BackchannelAuthenticationResponseActionEnum {
    InternalServerError = 'INTERNAL_SERVER_ERROR',
    BadRequest = 'BAD_REQUEST',
    Unauthorized = 'UNAUTHORIZED',
    UserIdentification = 'USER_IDENTIFICATION'
}

