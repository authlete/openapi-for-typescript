// tslint:disable
/**
 * Authlete API
 * Authlete API Document. 
 *
 * The version of the OpenAPI document: 2.2.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
    Property,
} from './';

/**
 * @export
 * @interface BackchannelAuthenticationCompleteRequest
 */
export interface BackchannelAuthenticationCompleteRequest {
    /**
     * The ticket issued by Authlete\'s `/backchannel/authentication` API. 
     * @type {string}
     * @memberof BackchannelAuthenticationCompleteRequest
     */
    ticket: string;
    /**
     * The result of the end-user authentication and authorization. One of the following. Details are described in the description. 
     * @type {string}
     * @memberof BackchannelAuthenticationCompleteRequest
     */
    result: BackchannelAuthenticationCompleteRequestResultEnum;
    /**
     * The subject (= unique identifier) of the end-user. 
     * @type {string}
     * @memberof BackchannelAuthenticationCompleteRequest
     */
    subject: string;
    /**
     * The value of the sub claim that should be used in the ID token. 
     * @type {string}
     * @memberof BackchannelAuthenticationCompleteRequest
     */
    sub?: string;
    /**
     * The time at which the end-user was authenticated. Its value is the number of seconds from `1970-01-01`. 
     * @type {string}
     * @memberof BackchannelAuthenticationCompleteRequest
     */
    authTime?: string;
    /**
     * The reference of the authentication context class which the end-user authentication satisfied. 
     * @type {string}
     * @memberof BackchannelAuthenticationCompleteRequest
     */
    acr?: string;
    /**
     * Additional claims which will be embedded in the ID token. 
     * @type {string}
     * @memberof BackchannelAuthenticationCompleteRequest
     */
    claims?: string;
    /**
     * The extra properties associated with the access token. 
     * @type {Array<Property>}
     * @memberof BackchannelAuthenticationCompleteRequest
     */
    properties?: Array<Property>;
    /**
     * Scopes to replace the scopes specified in the original backchannel authentication request with. When nothing is specified for this parameter, replacement is not performed. 
     * @type {Array<string>}
     * @memberof BackchannelAuthenticationCompleteRequest
     */
    scopes?: Array<string>;
    /**
     * JSON that represents additional JWS header parameters for ID tokens. 
     * @type {string}
     * @memberof BackchannelAuthenticationCompleteRequest
     */
    idtHeaderParams?: string;
    /**
     * The description of the error. If this optional request parameter is given, its value is used as the value of the `error_description` property, but it is used only when the result is not `AUTHORIZED`. To comply with the specification strictly, the description must not include characters outside the set `%x20-21 / %x23-5B / %x5D-7E`. 
     * @type {string}
     * @memberof BackchannelAuthenticationCompleteRequest
     */
    errorDescription?: string;
    /**
     * The URI of a document which describes the error in detail. This corresponds to the `error_uri` property in the response to the client. 
     * @type {string}
     * @memberof BackchannelAuthenticationCompleteRequest
     */
    errorUri?: string;
    /**
     * The representation of an access token that may be issued as a result of the Authlete API call.  Basically, it is the Authlete server\'s role to generate an access token. However, some systems may have inflexible restrictions on the format of access tokens. Such systems may use this `accessToken` request parameter to specify the representation of an access token by themselves instead of leaving the access token generation task to the Authlete server.  Usually, the Authlete server (1) generates a random 256-bit value, (2) base64url-encodes the value into a 43-character string, and (3) uses the resultant string as the representation of an access token. The Authlete implementation is written on the assumption that the 256-bit entropy is big enough. Therefore, make sure that the entropy of the value of the `accessToken` request parameter is big enough, too.  The entropy does not necessarily have to be equal to or greater than 256 bits. For example, 192-bit random values (which will become 32-character strings when encoded by base64url) may be enough. However, note that if the entropy is too low, access token string values will collide and Authlete API calls will fail.  When no access token is generated as a result of the Authlete API call, this `accessToken` request parameter is not used. Note that the Authlete API generates an access token only when the flow is CIBA PUSH. In the cases of CIBA POLL and CIBA PING, an access token is generated at the token endpoint.
     * @type {string}
     * @memberof BackchannelAuthenticationCompleteRequest
     */
    accessToken?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum BackchannelAuthenticationCompleteRequestResultEnum {
    TransactionFailed = 'TRANSACTION_FAILED',
    AccessDenied = 'ACCESS_DENIED',
    Authorized = 'AUTHORIZED'
}

