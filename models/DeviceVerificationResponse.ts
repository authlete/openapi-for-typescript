// tslint:disable
/**
 * Authlete API
 * Authlete API Document. 
 *
 * The version of the OpenAPI document: 2.2.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
    AuthorizationDetails,
    DynamicScope,
    Pair,
    Scope,
} from './';

/**
 * @export
 * @interface DeviceVerificationResponse
 */
export interface DeviceVerificationResponse {
    /**
     * The code which represents the result of the API call.
     * @type {string}
     * @memberof DeviceVerificationResponse
     */
    resultCode?: string;
    /**
     * A short message which explains the result of the API call.
     * @type {string}
     * @memberof DeviceVerificationResponse
     */
    resultMessage?: string;
    /**
     * The next action that the authorization server implementation should take.
     * @type {string}
     * @memberof DeviceVerificationResponse
     */
    action?: DeviceVerificationResponseActionEnum;
    /**
     * The content that the authorization server implementation is to return to the client application. Its format varies depending on the value of `action` parameter. 
     * @type {string}
     * @memberof DeviceVerificationResponse
     */
    responseContent?: string;
    /**
     * The client ID of the client application to which the user code has been issued. 
     * @type {number}
     * @memberof DeviceVerificationResponse
     */
    clientId?: number;
    /**
     * The client ID alias of the client application to which the user code has been issued. 
     * @type {string}
     * @memberof DeviceVerificationResponse
     */
    clientIdAlias?: string;
    /**
     * `true` if the value of the `client_id` request parameter included in the device authorization request is the client ID alias. `false` if the value is the original numeric client ID. 
     * @type {boolean}
     * @memberof DeviceVerificationResponse
     */
    clientIdAliasUsed?: boolean;
    /**
     * The name of the client application to which the user code has been issued. 
     * @type {string}
     * @memberof DeviceVerificationResponse
     */
    clientName?: string;
    /**
     * The scopes requested by the device authorization request.  Note that `description` property and `descriptions` property of each scope object in the array contained in this property is always null even if descriptions of the scopes are registered. 
     * @type {Array<Scope>}
     * @memberof DeviceVerificationResponse
     */
    scopes?: Array<Scope>;
    /**
     * The names of the claims which were requested indirectly via some special scopes. See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) in OpenID Connect Core 1.0 for details.  This property is always `null` if the `scope` request parameter of the device authorization request does not include the `openid` scope even if special scopes (such as `profile`) are included in the request (unless the openid scope is included in the default set of scopes which is used when the `scope` request parameter is omitted). 
     * @type {Array<string>}
     * @memberof DeviceVerificationResponse
     */
    claimNames?: Array<string>;
    /**
     * The list of ACR values requested by the device authorization request. 
     * @type {Array<string>}
     * @memberof DeviceVerificationResponse
     */
    acrs?: Array<string>;
    /**
     * The resources specified by the `resource` request parameters or by the `resource` property in the request object. If both are given, the values in the request object should be set. See \"Resource Indicators for OAuth 2.0\" for details. 
     * @type {Array<string>}
     * @memberof DeviceVerificationResponse
     */
    resources?: Array<string>;
    /**
     * @type {AuthorizationDetails}
     * @memberof DeviceVerificationResponse
     */
    authorizationDetails?: AuthorizationDetails;
    /**
     * The attributes of this service that the client application belongs to. 
     * @type {Array<Pair>}
     * @memberof DeviceVerificationResponse
     */
    serviceAttributes?: Array<Pair>;
    /**
     * The attributes of the client. 
     * @type {Array<Pair>}
     * @memberof DeviceVerificationResponse
     */
    clientAttributes?: Array<Pair>;
    /**
     * The dynamic scopes which the client application requested by the scope request parameter. 
     * @type {Array<DynamicScope>}
     * @memberof DeviceVerificationResponse
     */
    dynamicScopes?: Array<DynamicScope>;
    /**
     * Get the date in milliseconds since the Unix epoch (1970-01-01) at which the user code will expire. 
     * @type {number}
     * @memberof DeviceVerificationResponse
     */
    expiresAt?: number;
}

/**
 * @export
 * @enum {string}
 */
export enum DeviceVerificationResponseActionEnum {
    InternalServerError = 'INTERNAL_SERVER_ERROR',
    NotExist = 'NOT_EXIST',
    Expired = 'EXPIRED',
    Valid = 'VALID'
}

