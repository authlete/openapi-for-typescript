// tslint:disable
/**
 * Authlete API
 * Authlete API Document. 
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
    AuthorizationDetails,
    DynamicScope,
    Grant,
    GrantManagementAction,
    Pair,
    Scope,
} from './';

/**
 * @export
 * @interface DeviceVerificationResponse
 */
export interface DeviceVerificationResponse {
    /**
     * The code which represents the result of the API call.
     * @type {string}
     * @memberof DeviceVerificationResponse
     */
    resultCode?: string;
    /**
     * A short message which explains the result of the API call.
     * @type {string}
     * @memberof DeviceVerificationResponse
     */
    resultMessage?: string;
    /**
     * The next action that the authorization server implementation should take.
     * @type {string}
     * @memberof DeviceVerificationResponse
     */
    action?: DeviceVerificationResponseActionEnum;
    /**
     * The client ID of the client application to which the user code has been issued. 
     * @type {number}
     * @memberof DeviceVerificationResponse
     */
    clientId?: number;
    /**
     * The client ID alias of the client application to which the user code has been issued. 
     * @type {string}
     * @memberof DeviceVerificationResponse
     */
    clientIdAlias?: string;
    /**
     * `true` if the value of the `client_id` request parameter included in the device authorization request is the client ID alias. `false` if the value is the original numeric client ID. 
     * @type {boolean}
     * @memberof DeviceVerificationResponse
     */
    clientIdAliasUsed?: boolean;
    /**
     * The name of the client application to which the user code has been issued. 
     * @type {string}
     * @memberof DeviceVerificationResponse
     */
    clientName?: string;
    /**
     * The scopes requested by the device authorization request.  Note that `description` property and `descriptions` property of each scope object in the array contained in this property is always null even if descriptions of the scopes are registered. 
     * @type {Array<Scope>}
     * @memberof DeviceVerificationResponse
     */
    scopes?: Array<Scope>;
    /**
     * The names of the claims which were requested indirectly via some special scopes. See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) in OpenID Connect Core 1.0 for details.  This property is always `null` if the `scope` request parameter of the device authorization request does not include the `openid` scope even if special scopes (such as `profile`) are included in the request (unless the openid scope is included in the default set of scopes which is used when the `scope` request parameter is omitted). 
     * @type {Array<string>}
     * @memberof DeviceVerificationResponse
     */
    claimNames?: Array<string>;
    /**
     * The list of ACR values requested by the device authorization request. 
     * @type {Array<string>}
     * @memberof DeviceVerificationResponse
     */
    acrs?: Array<string>;
    /**
     * The resources specified by the `resource` request parameters or by the `resource` property in the request object. If both are given, the values in the request object should be set. See \"Resource Indicators for OAuth 2.0\" for details. 
     * @type {Array<string>}
     * @memberof DeviceVerificationResponse
     */
    resources?: Array<string>;
    /**
     * @type {AuthorizationDetails}
     * @memberof DeviceVerificationResponse
     */
    authorizationDetails?: AuthorizationDetails;
    /**
     * The attributes of this service that the client application belongs to. 
     * @type {Array<Pair>}
     * @memberof DeviceVerificationResponse
     */
    serviceAttributes?: Array<Pair>;
    /**
     * The attributes of the client. 
     * @type {Array<Pair>}
     * @memberof DeviceVerificationResponse
     */
    clientAttributes?: Array<Pair>;
    /**
     * The dynamic scopes which the client application requested by the scope request parameter. 
     * @type {Array<DynamicScope>}
     * @memberof DeviceVerificationResponse
     */
    dynamicScopes?: Array<DynamicScope>;
    /**
     * Get the date in milliseconds since the Unix epoch (1970-01-01) at which the user code will expire. 
     * @type {number}
     * @memberof DeviceVerificationResponse
     */
    expiresAt?: number;
    /**
     * @type {GrantManagementAction}
     * @memberof DeviceVerificationResponse
     */
    gmAction?: GrantManagementAction;
    /**
     * the value of the `grant_id` request parameter of the device authorization request.  The `grant_id` request parameter is defined in [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html) , which is supported by Authlete 2.3 and newer versions. 
     * @type {string}
     * @memberof DeviceVerificationResponse
     */
    grantId?: string;
    /**
     * @type {Grant}
     * @memberof DeviceVerificationResponse
     */
    grant?: Grant;
    /**
     * The subject identifying the user who has given the grant identified by the `grant_id` request parameter of the device authorization request.  Authlete 2.3 and newer versions support <a href= \"https://openid.net/specs/fapi-grant-management.html\">Grant Management for OAuth 2.0</a>. An authorization request may contain a `grant_id` request parameter which is defined in the specification. If the value of the request parameter is valid, {@link #getGrantSubject()} will return the subject of the user who has given the grant to the client application. Authorization server implementations may use the value returned from {@link #getGrantSubject()} in order to determine the user to authenticate.  The user your system will authenticate during the authorization process (or has already authenticated) may be different from the user of the grant. The first implementer\'s draft of \"Grant Management for OAuth 2.0\" does not mention anything about the case, so the behavior in the case is left to implementations. Authlete will not perform the grant management action when the `subject` passed to Authlete does not match the user of the grant. 
     * @type {string}
     * @memberof DeviceVerificationResponse
     */
    grantSubject?: string;
    /**
     * The entity ID of the client. 
     * @type {string}
     * @memberof DeviceVerificationResponse
     */
    clientEntityId?: string;
    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     * @type {boolean}
     * @memberof DeviceVerificationResponse
     */
    clientEntityIdUsed?: boolean;
}

/**
 * @export
 * @enum {string}
 */
export enum DeviceVerificationResponseActionEnum {
    InternalServerError = 'INTERNAL_SERVER_ERROR',
    NotExist = 'NOT_EXIST',
    Expired = 'EXPIRED',
    Valid = 'VALID'
}

